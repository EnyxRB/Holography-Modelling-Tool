@name Holography Modelling Tool
@persist CurHolo IncMove IncScale
@persist IncAng Mode Slave:entity [QMark Code CopyMat CopyModel]:string MirrorIndex
@persist [CopyColor CopyScale CopyPos]:vector CopyAng:angle CopyAlpha [FileLoading]:string
@persist [DecodedTable Projects]:table SpawnIndex LoadQuery DeleteIndex [ProjectsFile PathToWrite StringToWrite]:string
@persist ProjectsLoaded CodeIndex CheckIndex [IntersectIndexs IntersectDists]:array PACur PA1Set PA2Set

"--------------------------------------------AUTHOR--------------------------------------------------"
"#############################################################################################"
"##      ######     #####  ######  ########  #####  ######  #############       ######     ###"
"##  ##########  #  #####  #######  ######  #######  ####  ##############  #########  ####  ##"
"##  ##########  ##  ####  ########  ####  #########  ##  ###############  ###############  ##"
"##      ######  ###  ###  #########  ##  ###########    ################       #########  ###"
"##  ##########  ####  ##  ##########   ############  ##  ###############  #########   #######"
"##  ##########  #####  #  ##########   ###########  ####  ##############  #########  ########"
"##      ######  ######    ##########   ##########  ######  #############       ####        ##"
"#############################################################################################"

"Steam: http://steamcommunity.com/id/enyx-aeropath/"
"Github: https://github.com/EnyxRB/Holography-Modelling-Tool"
"----------------------------------------------------------------------------------------------------"

#---------------------------------WHAT DOES IT DO?---------------------------------#
# ---- HOLOGRAPHY is the science and practice of making holograms ---- #
# This tool enables a more practical way of creating and modelling detailed hologram models in Expression2.
# Meaning you don't have to edit that same line of code over and over just to get the damn thing
# in the right position. I've been there before. Even for the experienced holo modelers, this makes the entire process
# massively quicker... once you know the commands...
#--------------------------------------------------------------------------#

#---------------------------------COMMANDS---------------------------------#
#   -i model : creates a new hologram with said model
#   -delete : deletes the current hologram from the program
#   -inc number : e.g. -inc 5. sets the incremental for the currently selected mode.
#   -move x,y,z : moves the current hologram to given x,y,z coordinates
#   -move reset : resets the position of the current hologram back to starting position
#   -scale reset : resets the scale of the current hologram
#   -scale double : doubles the current scale of the current hologram
#   -scale half : halves the current scale of the current hologram
#   -scale x,y,z : changes the unit scale of the current hologram to vec(x,y,z). Same as holoScaleUnits()
#   -scalem x,y,z : changes the multplier scale of the current hologram vec(x,y,z). Same as holoScale()
#   -ang p,y,r : changes the current angles to the said pitch,yaw and roll
#   -ang reset : resets the angle of the current hologram to it's starting angle
#   -color R,G,B : e.g. -color 255,0,0. changes the color of the current hologram to said color values
#   -alpha number : changes the alpha of the current hologram to said number
#   -mat material : changes the holograms material to the said material
#   -mirror direction (forward/right/up) : creates a mirrored hologram around the e2 across the said plane
#   -copy model/pos/scale/ang/color/mat/alpha : copies said value of properties of current hologram
#   -paste model/pos/scale/ang/color/mat/alpha : pastes the last copied value onto the curent hologram
#   -dupe : duplicates the current selected hologram in the exact same position
#   -save name : saves the project as the given filename in the project folder
#   -save : in the case that you have already given a filename to save as, you can use save to quick save
#   -load name : finds and loads the project with the given filename
#   -export filename: sets the code required to spawn your creation in the slave e2 and changes slave name to said filename
#   -projects :  prints a list of all projects currently saved in the project folder
#--------------------------------------------------------------------------#

#---------------------------------CONTROLS---------------------------------#
#   numpad1 = changes current mode to move mode, allowing movement with keys
#   numpad2 = changes current mode to scale mode, allowing unit scaling with keys
#   numpad3 = changes current mode to angling mode, allowing angling with keys
#   numpad8 = move holo forward /pitch holo down
#   numpad5 = move holo backward/pitch holo up
#   numpad4 = move holo left/yaw holo left
#   numpad6 = move holo right/yaw holo right
#   numpad- = move holo up/roll holo left
#   numpad+ = move holo down/roll holo right
#   shift   = searches for and selects the hologram you are currently looking at
#   numpad/ = cycles to the previous hologram in the program
#   numpad* = cycles to the next hologram in the program
#--------------------------------------------------------------------------#

#-------------------------------INSTRUCTIONS-------------------------------#
#1. Place the Holography Modelling Tool E2 on the ground
#2. Place the Holography Modelling Tool Slave E2 on the ground
#3. Make your creation using the commands and controls above
#4. Remember to -save followed by a filename often so you dont loose your progress
#4. Type -export followed by the filename you wish the E2 to have
#5. Right click on the placed slave E2 and save it
#6. Got yourself a holo model
#--------------------------------------------------------------------------#

#--------------------------------SLAVE CODE--------------------------------#
#If you don't have the slave chip already, simply copy the code below into a blank E2 and follow the instructions.
#[
@name Holography Modelling Tool Slave
@inputs 
@outputs 
@persist Boss:entity
@trigger 

if (first() | dupefinished()){
    Boss = dsProbe("hmtool")[1,entity]
    dsSendDirect("init",Boss,0)    
}
]#

if (first() | dupefinished()){    
    #include "e2shared/holography_modelling_tool/include/Holography_Modelling_Tool_Autoupdate"
    #include "e2shared/holography_modelling_tool/include/Holography_Modelling_Tool_Funcs"

    setName("Holography Modelling Tool ("+Version+")")
    
    runOnKeys(owner(),1)
    runOnChat(1)
    runOnFile(1)
    dsJoinGroup("hmtool") 
            
    QTable=array("a")
    QMark = vonEncode(QTable):explode("")[1,string]
    
    ProjectsFile = ">e2shared/holography_modelling_tool_data/projects.txt"
        
    if (fileCanLoad()){
        fileLoad(ProjectsFile)    
    }
    else{
        timer("reload",100)    
    }
    
    colorPrint("TOOL","Please place down the Holography Modelling Tool Slave E2 on the ground","","")
                                                                              
    IncMove = 6 
    IncScale = 6
    IncAng = 45
    Mode = 1
    LastHolo = 999
    LastIndex = 999  
       
    timer("motd",40000)    
}

if (keyClk(owner())){
    if (owner():keyPressed("pad_6")|owner():keyPressed("pad_4")|owner():keyPressed("pad_8")|owner():keyPressed("pad_5")|owner():keyPressed("pad_minus")|owner():keyPressed("pad_plus")){
        if (holoEntity(CurHolo):isValid()){
            if (Mode==1){                
                local Vec = holoEntity(CurHolo):pos()+(vec(owner():keyPressed("pad_8")-owner():keyPressed("pad_5"),owner():keyPressed("pad_4")-owner():keyPressed("pad_6"),owner():keyPressed("pad_minus")-owner():keyPressed("pad_plus"))*IncMove)
                CurIndex:moveHolo(Vec)
            }
            elseif (Mode==2){
                local Vec = (vec(owner():keyPressed("pad_8")-owner():keyPressed("pad_5"),owner():keyPressed("pad_4")-owner():keyPressed("pad_6"),owner():keyPressed("pad_minus")-owner():keyPressed("pad_plus"))*IncScale)                
                CurIndex:scaleHolo(Vec,0,0)
            }
            else{
                local Ang = (ang(owner():keyPressed("pad_8")-owner():keyPressed("pad_5"),owner():keyPressed("pad_4")-owner():keyPressed("pad_6"),owner():keyPressed("pad_plus")-owner():keyPressed("pad_minus"))*IncAng)
                CurIndex:angleHolo(Ang,0,0)
            }
        }
    }
    elseif (owner():keyPressed("pad_1")){
        Mode = 1
        colorPrint("TOOL","Current mode set to:","Move","with increment of "+IncMove)            
    }
    elseif (owner():keyPressed("pad_2")){
        Mode = 2
        colorPrint("TOOL","Current mode set to:","Scale","with increment of "+IncScale)        
    }
    elseif (owner():keyPressed("pad_3")){
        Mode = 3
        colorPrint("TOOL","Current mode set to:","Angle","with increment of "+IncAng)        
    }
    elseif (owner():keyPressed("pad_multiply")|owner():keyPressed("pad_divide")){
        cycleHolo(owner():keyPressed("pad_multiply"),owner():keyPressed("pad_divide"))        
    }
    
    elseif (owner():keyPressed("lshift")){
        #ifdef rayOBBoxIntersection(vector,vector,vector,vector,angle)
        if (Holos:count()>0){
            colorPrint("TOOL","Searching for Hologram...","","")
            IntersectDists = array()
            IntersectIndexs = array() 
            CheckIndex = 0
            ShootPos = owner():shootPos()
            Eye = owner():eye()
            timer("checkHolo",10) 
        }  
        #else
            colorPrint("BUG","Function:","rayOBBoxIntersection","is not enabled on your server")             
        #endif     
    }
    
    elseif (owner():keyPressed("e")){
        #ifdef rayOBBoxIntersection(vector,vector,vector,vector,angle)
        ShootPos = owner():shootPos()
        Eye = owner():eye()        
        CurIndex:setPAPoint(1)  
        #else
            colorPrint("BUG","Function:","rayOBBoxIntersection","is not enabled on your server")          
        #endif
    }
    
    elseif (owner():keyPressed("r")){
        #ifdef rayOBBoxIntersection(vector,vector,vector,vector,angle)
        ShootPos = owner():shootPos()
        Eye = owner():eye()        
        CurIndex:setPAPoint(2)  
        #else
            colorPrint("BUG","Function:","rayOBBoxIntersection","is not enabled on your server")          
        #endif
    }
    
    elseif (owner():keyPressed("capslock")){
        #ifdef rayOBBoxIntersection(vector,vector,vector,vector,angle)
            if (PA1Set && PA2Set){
                if (holoEntity(-1):isValid() && holoEntity(-2):isValid()){
                    local Diff = holoEntity(-2):pos()-holoEntity(-1):pos()
                    local Pos = holoEntity(holoID(PACur)):pos()+(Diff)
                    PACur:moveHolo(Pos) 
                }
            }           
        #else
            colorPrint("BUG","Function:","rayOBBoxIntersection","is not enabled on your server")          
        #endif
    }    
}

if (chatClk(owner())){   
    local Chat = lastSaid():lower():explode(" ")

    if (Chat[1,string]=="-i"){
        hideChat(1)
        if (holoCanCreate()){
            createHolo(Chat[2,string])
        }
        else{colorPrint("TOOL","Either hit maximum hologram limit or burst limit","","")}
    }         
    elseif (Chat[1,string]=="-inc"){
        hideChat(1)
        switch(Mode){
            case(1),
                IncMove = Chat[2,string]:toNumber()
                colorPrint("TOOL","Incremental value for moving changed to:",IncMove:toString(),"")
                break  
            case(2),
                IncScale = Chat[2,string]:toNumber()
                colorPrint("TOOL","Incremental value for scaling changed to:",IncScale:toString(),"")
                break  
            case(3),
                IncAng = Chat[2,string]:toNumber()
                colorPrint("TOOL","Incremental value for angling changed to:",IncAng:toString(),"")
                break  
        }
    } 
    elseif (Chat[1,string]=="-move"){
        hideChat(1)        
        if (Chat[2,string]=="reset"){
            CurIndex:moveHolo(entity():pos())         
        }
        elseif (Chat[2,string]!=""){            
            local XYZ = Chat[2,string]:explode(",")
            local Pos = vec(XYZ[1,string]:toNumber(),XYZ[2,string]:toNumber(),XYZ[3,string]:toNumber())
            local LPos = entity():toLocal(Pos)
            CurIndex:moveHolo(entity():toWorld(Pos))             
        }          
    }         
    elseif (Chat[1,string]=="-scale"){
        hideChat(1)        
        if (Chat[2,string]!=""){
            if (Chat[2,string]=="half"){
                CurIndex:scaleHolo(-HoloScale[CurHolo,vector]/2,0,0)            
            }
            elseif (Chat[2,string]=="double"){
                CurIndex:scaleHolo(HoloScale[CurHolo,vector],0,0)            
            }
            elseif (Chat[2,string]=="reset"){
                CurIndex:scaleHolo(vec(1),0,1)         
            }
            else{
                local XYZ = Chat[2,string]:explode(",")
                CurIndex:scaleHolo(vec(XYZ[1,string]:toNumber(),XYZ[2,string]:toNumber(),XYZ[3,string]:toNumber()),1,0)     
            }
        }
    }
    elseif (Chat[1,string]=="-scalem"){
        hideChat(1)
        local XYZ = Chat[2,string]:explode(",")
        CurIndex:scaleHolo(vec(XYZ[1,string]:toNumber(),XYZ[2,string]:toNumber(),XYZ[3,string]:toNumber()),0,1)         
    }
    elseif (Chat[1,string]=="-ang"){
        hideChat(1)
        if (Chat[2,string]=="reset"){
            CurIndex:angleHolo(ang(0,0,0),1,0)            
        }
        elseif (Chat[2,string]!=""){
            local PYR = Chat[2,string]:explode(",")
            CurIndex:angleHolo(ang(PYR[1,string]:toNumber(),PYR[2,string]:toNumber(),PYR[3,string]:toNumber()),0,1)            
        }       
    }
    elseif (Chat[1,string]=="-model"){
        hideChat(1)
        CurIndex:modelHolo(Chat[2,string])                  
    }
    elseif (Chat[1,string]=="-color"){
        hideChat(1)
        local RGB = Chat[2,string]:explode(",")
        CurIndex:colorHolo(vec(RGB[1,string]:toNumber(),RGB[2,string]:toNumber(),RGB[3,string]:toNumber()))  
    }  
    elseif (Chat[1,string]=="-alpha"){
        hideChat(1)
        CurIndex:alphaHolo(Chat[2,string]:toNumber())    
    }
    elseif (Chat[1,string]=="-mat"){
        hideChat(1)
        CurIndex:materializeHolo(Chat[2,string])
    }
    elseif (Chat[1,string]=="-delete"){
        hideChat(1)
        CurIndex:deleteHolo(0)
    } 
    elseif (Chat[1,string]=="-mirror"){
        hideChat(1)
        CurIndex:mirrorHolo(Chat[2,string])
    } 
    elseif (Chat[1,string]=="-dupe"){
        hideChat(1)
        CurIndex:dupeHolo()
    }
    elseif (Chat[1,string]=="-copy"){
        hideChat(1)
        if (Chat[2,string]=="mat"){
            CopyMat = HoloMaterial[CurIndex,string]
            colorPrint("TOOL","Material:",CopyMat," copied")   
        }
        elseif (Chat[2,string]=="color"){
            CopyColor = HoloColor[CurIndex,vector]  
            colorPrint("TOOL","Color:",CopyColor:toString()," copied")  
        }
        elseif (Chat[2,string]=="model"){
            CopyModelScale = HoloScale[CurIndex,vector] 
            CopyModel = HoloModel[CurIndex,string]  
            colorPrint("TOOL","Model:",CopyModel," copied")  
        }
        elseif (Chat[2,string]=="scale"){
            CopyScale = HoloScale[CurIndex,vector] 
            colorPrint("TOOL","Scale:",CopyScale:toString()," copied")    
        }
        elseif (Chat[2,string]=="pos"){
            CopyPos = entity():toLocal(holoEntity(CurHolo):pos()) 
            colorPrint("TOOL","Position:",CopyPos:toString()," copied")  
        }
        elseif (Chat[2,string]=="ang"){
            CopyAng = entity():toLocal(holoEntity(CurHolo):angles())   
            colorPrint("TOOL","Angle:",CopyAng:toString()," copied")
        }
        elseif (Chat[2,string]=="alpha"){
            CopyAlpha = HoloAlpha[CurIndex,number]
            colorPrint("TOOL","Alpha:",CopyAlpha:toString()," copied")    
        }
    }
    elseif (Chat[1,string]=="-paste"){
        hideChat(1)
        if (Chat[2,string]=="mat"){
            CurIndex:materializeHolo(CopyMat) 
            colorPrint("TOOL","Material:",CopyMat," pasted onto Hologram #"+CurHolo)     
        }
        elseif (Chat[2,string]=="color"){
            CurIndex:colorHolo(CopyColor)
            colorPrint("TOOL","Color:",CopyColor:toString()," pasted onto Hologram #"+CurHolo)   
        }
        elseif (Chat[2,string]=="model"){            
            CurIndex:modelHolo(CopyModel)  
            CurIndex:scaleHolo(vec(1),0,1)
            colorPrint("TOOL","Changed Hologram #"+CurHolo+"'s model to:",CopyModel,"")  
        }
        elseif (Chat[2,string]=="scale"){
            CurIndex:scaleHolo(CopyScale,1,0)    
            colorPrint("TOOL","Scale:",CopyScale:toString()," pasted onto Hologram #"+CurHolo)
        }
        elseif (Chat[2,string]=="pos"){
            CurIndex:moveHolo(entity():toWorld(CopyPos)) 
            colorPrint("TOOL","Hologram #"+CurHolo+" moved to copied position:",CopyPos:toString(),"") 
        }
        elseif (Chat[2,string]=="ang"){
            CurIndex:angleHolo(entity():toWorld(CopyAng),0,1) 
            colorPrint("TOOL","Hologram #"+CurHolo+" angled to copied angle:",CopyAng:toString(),"")  
        }
        elseif (Chat[2,string]=="alpha"){
            CurIndex:alphaHolo(CopyAlpha) 
            colorPrint("TOOL","Hologram #"+CurHolo+" set alpha to copied alpha:",CopyAlpha:toString(),"")  
        }
    }
    elseif (Chat[1,string]=="-export"){
        if (Chat[2,string]!=""){
            Filename = Chat[2,string]
            hideChat(1)
            if (Slave:isValid()){
                createCode()
            }
            else{colorPrint("TOOL","You need to spawn the Hologrpahy Modelling Tool Slave E2 first","","")}
        }
    }   
    elseif (Chat[1,string]=="-save"){
        hideChat(1)
        if (Index>0){
            if (ProjectsLoaded){            
                if (fileCanWrite()){
                    local Save = 0
                    if (Chat[2,string] != ""){
                        Save = 1 
                        FileName = lastSaid():replace(Chat[1,string],"")
                        if (!FileName:find(".txt")){
                            if (FileName:find(".")){
                                FileName = (FileName:explode(".")[1,string] + ".txt"):sub(2)  
                            }
                            else{
                                FileName = (FileName + ".txt"):sub(2)        
                            }          
                        }
                        else{
                            FileName = FileName:sub(2)        
                        }
                        
                        FileLoading = ">e2shared/holography_modelling_tool_data/saved/" + FileName                                            
                    }
                    else{
                        if (FileLoading!=""){
                            Save = 1                               
                        }
                        else{
                            colorPrint("TOOL","The initial save must be followed by the title you want to save the project as.","","")
                        }    
                    }
                    
                    if (Save){
                        #Output[1,table] = HoloIndexs to be created (Number)
                        #Output[2,table] = Position e:toWorld of holos (Vector) 
                        #Output[3,table] = Angles of holos (Angle)       
                        #Output[4,table] = Model of holos (String)
                        #Output[5,table] = Scales of holos (Vector)
                        #Output[6,table] = Colors of holos (Vector)
                        #Output[7,table] = Materials of holos (String)
                        #Output[8,table] = Alphas of holos (Number)  
                        local Output = table(
                            Holos,
                            HoloPos,
                            HoloAng,
                            HoloModel,
                            HoloScale,
                            HoloColor,
                            HoloMaterial,
                            HoloAlpha
                        )
                                            
                        fileWrite(FileLoading,vonEncode(Output))
                        colorPrint("TOOL","Project saved as:",FileName,"("+FileLoading+")")  
                        
                        local Found = 0
                        for(I=1,Projects:count()){
                            if (Projects[I,string] == FileName){
                                Found = 1
                                break            
                            }
                        }

                        if (!Found){
                            Projects:pushString(FileName)
                            
                            if (fileCanWrite()){
                                fileWrite(ProjectsFile,vonEncode(Projects))   
                            }
                            else{
                                PathToWrite = ProjectsFile
                                StringToWrite = vonEncode(Projects) 
                                timer("rewrite",500)   
                            } 
                        }                                                       
                    }
                }
                else{
                    colorPrint("TOOL","Please try saving again in a few seconds...","","")        
                } 
            }
            else{
                colorPrint("TOOL","Please wait for the projects file to load first...","","")        
            }
           
        }
        else{
            colorPrint("TOOL","You must have at least 1 hologram spawned to save a project.","","")    
        }
    }          
    elseif (Chat[1,string]=="-load"){
        hideChat(1)
        LoadQuery = 0
        if (fileCanLoad()){
            FileName = lastSaid():replace(Chat[1,string],"")
            if (!FileName:find(".txt")){
                if (FileName:find(".")){
                    FileName = (FileName:explode(".")[1,string] + ".txt"):sub(2)  
                }
                else{
                    FileName = (FileName + ".txt"):sub(2)        
                }          
            }
            else{
                FileName = FileName:sub(2)        
            }            
            
            if (Index==0){
                FileLoading = ">e2shared/holography_modelling_tool_data/saved/" + FileName
                fileLoad(FileLoading)
                colorPrint("TOOL","Searching for design:",FileLoading,"")
            }
            else{
                colorPrint("TOOL","You will loose all unsaved work if you load a new file. Are you sure you want to contiune?","(Yes/No)","")
                LoadQuery = 1   
            }       
        }
        else{
            colorPrint("TOOL","Please wait a few seconds before loading another project","","")     
        }
    }
    elseif (Chat[1,string]=="yes"){
        if (LoadQuery){
            hideChat(1)
            LoadQuery = 0
            DeleteIndex = 0
            timer("delete",20)    
        }    
    }
    elseif (Chat[1,string]=="no"){
        if (LoadQuery){
            hideChat(1)
            LoadQuery = 0
            colorPrint("TOOL","Load cancelled. Remember to","-save","the current file before proceeding!")    
        }        
    }
    elseif (Chat[1,string]=="-projects"){
        hideChat(1)
        if (ProjectsLoaded){
            for(I=1,Projects:count()){
                colorPrint("TOOL","Project ("+I+"):",Projects[I,string],"...")        
            }
        }
        else{
            colorPrint("TOOL","Please wait until the projects file is loaded and try again.","","")         
        }           
    } 
}

if (fileClk(FileLoading)){
    if (fileStatus() == 1){      
        DecodedTable = vonDecodeTable(fileRead())
        if (DecodedTable[1,table]:exists(1)){
            colorPrint("TOOL","Project found! Loading holograms...","","")
            Index = 0
            SpawnIndex = 0
            timer("spawn",40) 
        }
        else{
            colorPrint("TOOL","Project contains no holograms. Please try a valid file.","","")        
        }  
    }
    else{
        colorPrint("TOOL","No design file found with the name:",FileName,"Please enter a correct file name.")        
    }
}

elseif (fileClk(ProjectsFile)){    
    if (fileStatus() == 1){
        Projects = vonDecodeTable(fileRead())            
    }
    else{
        if (fileCanWrite()){
            fileWrite(ProjectsFile,vonEncode(table()))   
        }
        else{
            PathToWrite = ProjectsFile
            StringToWrite = vonEncode(table()) 
            timer("rewrite",500)   
        }   
    }
    ProjectsLoaded = 1
    colorPrint("TOOL","Projects file loaded. You have a total of:",Projects:count():toString(),"Project files.")
    colorPrint("TOOL","Type","-projects","to list them all.")       
}

if (dsClk("init")){
    Slave = dsGetSender()
    colorPrint("TOOL","Slave connected.","","")    
}

if (clk("spawn")){
    local CantSpawn = 0
    if (holoCanCreate() & holoRemainingSpawns()>0){
        SpawnIndex++ 
        createHolo(DecodedTable[4,table][SpawnIndex,string])
        local LVec = DecodedTable[2,table][SpawnIndex,vector]
        SpawnIndex:moveHolo(entity():toWorld(vec(LVec:x(),LVec:y(),LVec:z())))
        local LAng = DecodedTable[3,table][SpawnIndex,angle]
        SpawnIndex:angleHolo(entity():toWorld(ang(LAng:pitch(),LAng:yaw(),LAng:roll())),0,1) 
        SpawnIndex:scaleHolo(DecodedTable[5,table][SpawnIndex,vector],1,0) 
        SpawnIndex:colorHolo(DecodedTable[6,table][SpawnIndex,vector])
        SpawnIndex:materializeHolo(DecodedTable[7,table][SpawnIndex,string])
        SpawnIndex:alphaHolo(DecodedTable[8,table][SpawnIndex,number])
    }
    else{
        CantSpawn = 1    
    }
    
    if ((SpawnIndex < DecodedTable[1,table]:count()) | CantSpawn){
        timer("spawn",40)        
    }
    elseif ((SpawnIndex >= DecodedTable[1,table]:count())){
        cycleHolo(1,0)
        colorPrint("TOOL","Holos finished loading!","","")        
    }   
}

elseif (clk("delete")){
    DeleteIndex++
    DeleteIndex:deleteHolo(1)
    if (DeleteIndex<Index){
        timer("delete",20)    
    }
    else{
        CurHolo=0
        CurIndex=0
        Holos = table()
        HoloPos = table() 
        HoloAng = table()
        HoloScale = table()
        HoloColor = table()
        HoloModel = table()
        HoloMaterial = table()
        HoloAlpha = table()
        FileLoading = ">e2shared/holography_modelling_tool_data/saved/" + FileName
        fileLoad(FileLoading)
        colorPrint("TOOL","Searching for design:",FileLoading,"")        
    }    
}

elseif (clk("reload")){
    if (fileCanLoad()){
        fileLoad(ProjectsFile)    
    }
    else{
        timer("reload",100)  
    }  
}

elseif (clk("rewrite")){
    if (fileCanWrite()){
        fileWrite(PathToWrite,StringToWrite)    
    }
    else{
        timer("rewrite",500)   
    }        
}

if (clk("formatcode")){
    CodeIndex++
    Code+=
"    indexHolo(vec("+round(HoloPos[CodeIndex,vector]:x(),3)+","+round(HoloPos[CodeIndex,vector]:y(),3)+","+round(HoloPos[CodeIndex,vector]:z(),3)+"),"+QMark+HoloModel[CodeIndex,string]+QMark+",ang("+round(HoloAng[CodeIndex,angle]:pitch(),3)+","+round(HoloAng[CodeIndex,angle]:yaw(),3)+","+round(HoloAng[CodeIndex,angle]:roll(),3)+"),vec("+round(HoloScale[CodeIndex,vector]:x(),3)+","+round(HoloScale[CodeIndex,vector]:y(),3)+","+round(HoloScale[CodeIndex,vector]:z(),3)+"),vec("+HoloColor[CodeIndex,vector]:x()+","+HoloColor[CodeIndex,vector]:y()+","+HoloColor[CodeIndex,vector]:z()+"),"+QMark+HoloMaterial[CodeIndex,string]+QMark+","+HoloAlpha[CodeIndex,number]+")
"     
    local FormatPercentage = (CodeIndex/Holos:count())*100
    colorPrint("TOOL","Code Creation Progress:",round(FormatPercentage,2)+"%","...")
    if (CodeIndex>=Holos:count()){
Code+=
"
    timer("+QMark+"spawn"+QMark+",10)
}


if (clk("+QMark+"spawn"+QMark+")){
    local CantSpawn = 0
    if (holoCanCreate() & holoRemainingSpawns()>0){
        SpawnIndex++ 
        createHolo(SpawnIndex)
    }
    else{
        CantSpawn = 1    
    }
    
    if ((SpawnIndex < Holos:count()) | CantSpawn){
        timer("+QMark+"spawn"+QMark+",10)        
    }
    elseif ((SpawnIndex >= Holos:count())){
        print("+QMark+"[HMT] Holos finished spawning."+QMark+")
        #Put your custom functions in here. E.g. Custom parents (holoParent(50,noentity()))      
    }   
}
"        
    Slave:remoteSetCode(Code)
    #fileWrite(">e2shared/"+Filename+".txt",Code)
    colorPrint("TOOL","Code transfer complete, please save the slave E2:",Filename,"")        
    }
    else{
        timer("formatcode",30)    
    }    
}

#ifdef runOnHTTP(number)
    if (chatClk(owner())){
        if (lastSaid():lower()=="-info"){
            hideChat(1)
            callInfo() 
        }
        elseif (lastSaid():lower()=="-update"){
            if (UpdateAllowed){
                hideChat(1)
                writeData(OutOfDate[1,string],FileData[2,string])        
            }    
        }
    }
 
    if (clk("re-write")){
        writeData(PthToWrite,DatToWrite)        
    }
    
    elseif (clk("re-load")){
        loadFile(LoadFile)        
    }
    
    if (fileClk(LoadFile)){
        fileData()     
    }

    if (clk("re-http")){
        checkFile(CheckFile)        
    }
    
    if (httpClk()){
        if (httpRequestUrl()==HeaderFile){
            headerData()            
        }
        elseif (httpRequestUrl()==CheckFile){
            standardData()           
        }
    }
#else
    colorPrint("AutoUpdater","The HTTP extention is:","Disabled","please get the server owner to enable it to use autoupdate!")
#endif

if (clk("motd")){
    colorPrint("TOOL","MOTD:",MOTD,"")
    timer("motd",40000)    
}

#ifdef rayOBBoxIntersection(vector,vector,vector,vector,angle)
if (clk("checkHolo")){
    for(I=1,5){
        if (CheckIndex<Holos:count()){
            CheckIndex++
            local Intersect = holoIntersect(holoID(CheckIndex))
            if (Intersect!=vec(0)){                
                IntersectIndexs:pushNumber(CheckIndex)
                IntersectDists:pushNumber((Intersect-owner():pos()):length())                    
            }      
        }
        else{
            break    
        }    
    }
    if (CheckIndex<Holos:count()){
        timer("checkHolo",10)    
    }
    else{
        if (IntersectDists:count()>0){
            local Closest = IntersectDists:minIndex()
            local ClosestIndex = IntersectIndexs[Closest,number]
            CurIndex = ClosestIndex
            CurHolo = holoID(CurIndex)
            setHoloCol()
            LastHolo = CurHolo
            LastIndex = CurIndex  
        }          
    }       
}
#endif
